// Code generated by protoc-gen-go. DO NOT EDIT.
// source: role/role.proto

package role

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RoleParams struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GroupId              string   `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleParams) Reset()         { *m = RoleParams{} }
func (m *RoleParams) String() string { return proto.CompactTextString(m) }
func (*RoleParams) ProtoMessage()    {}
func (*RoleParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb80865a74c2c62, []int{0}
}

func (m *RoleParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleParams.Unmarshal(m, b)
}
func (m *RoleParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleParams.Marshal(b, m, deterministic)
}
func (m *RoleParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleParams.Merge(m, src)
}
func (m *RoleParams) XXX_Size() int {
	return xxx_messageInfo_RoleParams.Size(m)
}
func (m *RoleParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleParams.DiscardUnknown(m)
}

var xxx_messageInfo_RoleParams proto.InternalMessageInfo

func (m *RoleParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoleParams) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type Response struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb80865a74c2c62, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type PnParams struct {
	Pn                   int64    `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty"`
	Ps                   int64    `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty"`
	Params               string   `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PnParams) Reset()         { *m = PnParams{} }
func (m *PnParams) String() string { return proto.CompactTextString(m) }
func (*PnParams) ProtoMessage()    {}
func (*PnParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb80865a74c2c62, []int{2}
}

func (m *PnParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PnParams.Unmarshal(m, b)
}
func (m *PnParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PnParams.Marshal(b, m, deterministic)
}
func (m *PnParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PnParams.Merge(m, src)
}
func (m *PnParams) XXX_Size() int {
	return xxx_messageInfo_PnParams.Size(m)
}
func (m *PnParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PnParams.DiscardUnknown(m)
}

var xxx_messageInfo_PnParams proto.InternalMessageInfo

func (m *PnParams) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *PnParams) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

func (m *PnParams) GetParams() string {
	if m != nil {
		return m.Params
	}
	return ""
}

func init() {
	proto.RegisterType((*RoleParams)(nil), "RoleParams")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*PnParams)(nil), "PnParams")
}

func init() { proto.RegisterFile("role/role.proto", fileDescriptor_ccb80865a74c2c62) }

var fileDescriptor_ccb80865a74c2c62 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x6d, 0x2b, 0xfd, 0x33, 0x05, 0x95, 0x39, 0x48, 0xf0, 0xa4, 0xf1, 0xe2, 0x29, 0x8a,
	0xde, 0xbc, 0xe9, 0x45, 0xbc, 0x95, 0x88, 0x1f, 0xa0, 0x36, 0x43, 0x11, 0xda, 0x24, 0x24, 0xdd,
	0xfd, 0xfc, 0x4b, 0x86, 0x76, 0x97, 0xbd, 0x84, 0xf7, 0x86, 0xdf, 0x4b, 0x5e, 0x06, 0xae, 0x83,
	0x9b, 0xe8, 0x39, 0x1d, 0xca, 0x07, 0xb7, 0x38, 0xf9, 0x0e, 0xa0, 0xdd, 0x44, 0x5d, 0x1f, 0xfa,
	0x39, 0x22, 0xc2, 0xa5, 0xed, 0x67, 0x12, 0xd9, 0x7d, 0xf6, 0xd4, 0x68, 0xd6, 0x28, 0xa0, 0x1a,
	0x83, 0xdb, 0xf9, 0x6f, 0x23, 0x72, 0x1e, 0x6f, 0x56, 0xbe, 0x40, 0xad, 0x29, 0x7a, 0x67, 0x23,
	0xa5, 0xe4, 0xe0, 0xcc, 0x31, 0x99, 0x34, 0xde, 0x40, 0x31, 0xc7, 0x71, 0x4d, 0x25, 0x29, 0x3f,
	0xa1, 0xee, 0xec, 0xfa, 0xd6, 0x15, 0xe4, 0xde, 0x32, 0x5f, 0xe8, 0xdc, 0x5b, 0xf6, 0x91, 0xe1,
	0xe4, 0x23, 0xde, 0x42, 0xe9, 0x99, 0x14, 0x05, 0x5f, 0xb0, 0xba, 0xd7, 0x5f, 0x68, 0x53, 0xe3,
	0x1f, 0x0a, 0xfb, 0xff, 0x81, 0xf0, 0x11, 0xaa, 0x0f, 0x63, 0xd2, 0x04, 0x5b, 0x75, 0xfa, 0xca,
	0x5d, 0xa3, 0xb6, 0x6e, 0xf2, 0x02, 0x1f, 0xa0, 0xfa, 0xa2, 0x85, 0xa1, 0x46, 0x6d, 0x0d, 0xce,
	0x90, 0xbf, 0x92, 0xf7, 0xf1, 0x76, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x5d, 0xcc, 0x2c, 0x22,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RoleService service

type RoleServiceClient interface {
	AddRole(ctx context.Context, in *RoleParams, opts ...client.CallOption) (*Response, error)
	GetRole(ctx context.Context, in *PnParams, opts ...client.CallOption) (*Response, error)
}

type roleServiceClient struct {
	c           client.Client
	serviceName string
}

func NewRoleServiceClient(serviceName string, c client.Client) RoleServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "roleservice"
	}
	return &roleServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *roleServiceClient) AddRole(ctx context.Context, in *RoleParams, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.AddRole", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRole(ctx context.Context, in *PnParams, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.GetRole", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	AddRole(context.Context, *RoleParams, *Response) error
	GetRole(context.Context, *PnParams, *Response) error
}

func RegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&RoleService{hdlr}, opts...))
}

type RoleService struct {
	RoleServiceHandler
}

func (h *RoleService) AddRole(ctx context.Context, in *RoleParams, out *Response) error {
	return h.RoleServiceHandler.AddRole(ctx, in, out)
}

func (h *RoleService) GetRole(ctx context.Context, in *PnParams, out *Response) error {
	return h.RoleServiceHandler.GetRole(ctx, in, out)
}
